;
;	MONITOR FUNCTIONS
;

GETL		EQU	$0003	; Inputs one line of text from the keyboard.
CRLF2		EQU	$0006	; Places cursor at start of new line
CRLF		EQU	$0009	; Places cursor at start of new line if it wasn't already at the start
PRNTSPACE	EQU	$000C	; Print a space character
PRNT		EQU	$0012	; Print a character (or control)
MESSAGE		EQU	$0015	; Print a string
GETKY		EQU	$001B	; Get the current key pressed
BRKEY		EQU	$001E	; If SHIFT and BREAK are pressed the zero flag is set
MELDY		EQU	$0030	; Plays music stored at location stored in DE
XTEMP		EQU	$0041	; Set the melody tempo 1-7 stored in A
MSTA		EQU	$0044	; Play tone stored at ($11A1)
MSTP		EQU	$0047	; Stop current tone
TONE		EQU	$02EA	; Play tone stored in HL where f=(2MHz/HL) or HL=(2MHz/f)
PRTWRD		EQU	$03BA	; Output a 16-bit hexadecimal number contained in HL to the screen
PRTBYT		EQU	$03C3	; Output a hexadecimal number contained in A to the screen
DIGASC		EQU	$03DA	
BRKTST		EQU	$0A44	; Test if break key is pressed
SNCV		EQU	$0DA6	; Wait for V-Blank
DISPAC		EQU	$0BCE	; Convert a display code stored in A into its ASCII code
ASCWRD		EQU	$0410	; Convert AF,HL ASCII into hex and store in HL
MOVECU		EQU	$0DDC	; Control the V.D.U.
CALVAD		EQU	$0FB4	; Compute the vram address of pixel position stored in HL (H=row, L=col)

;
;	EQUATES
;

FLOORHEIGHT	EQU	21
GRAVITY		EQU	0000_0001B
MAXSPEED	EQU	0000_0110B
OBJCOUNT	EQU	6
OBJVALS		EQU	8
JUMPSPEED	EQU	-0000_1011B		; (-1<<3) -3


; CHARACTERS
SPACESHIP	EQU	$C7
FACE1SYM	EQU	$CE
FACE2SYM	EQU	$CF
SNAKESYM	EQU	$DF
CARSYM		EQU	$C8
PLAYERSYM	EQU	$CA
BLOCKSYM	EQU	$43
FLOORSYM	EQU	$F3

; KEYS
LEFTKEY		EQU	$41
RIGHTKEY	EQU	$44
SPACEKEY	EQU	$20

; ADDRESSES
VIDMEM      EQU $D000

;
;	MACROS
;

PRINT		MACRO
	LD		DE,	%1
	CALL	MESSAGE
ENDM

PRINTLN		MACRO
	IF '%1'
		PRINT %1
		CALL CRLF
	ELSE
		CALL CRLF2
	ENDIF
ENDM

PRINTXY		MACRO
	LD		A,	%1				; Set cursor X
	LD		($1171),	A
	LD		A,	%2				; Set cursor Y
	LD		($1172),	A
	PRINT	%3
ENDM

PRINTCEN	MACRO				; Print string in horizontal center of screen
	PRINTXY	(40-%1)/2,	%2,	%3
ENDM

CURHOME		MACRO
	PUSH	AF
	LD		A,	$15
	CALL	PRNT
	POP		AF
ENDM

CLS			MACRO
	LD		A,	$16
	CALL	PRNT
ENDM

SLEEPX		MACRO				; Sleep for 0x?? * 0x?? iterations
	PUSH	DE
	PUSH	BC
	IF %1<1
		LD DE, 1
	ELSE
		LD DE, %1
	ENDIF
	
	IF '%2'
		IF %2<1
			LD B, 1
		ELSE
			LD B, %2
		ENDIF
	ELSE
		LD B, 1
	ENDIF
	LD		(SLEEPCOUNT),	DE
	CALL	SLEEP
	POP		BC
	POP		DE
ENDM

DRAWDIGITA	MACRO
	ADD		A,	32
	LD		(VIDMEM+%1+%2*40), A
ENDM

DRAWDIGIT	MACRO
	LD		A,	(%1)
	DRAWDIGITA	%2, %3
ENDM

DRAWDIGITND	MACRO
	PUSH	AF
	DRAWDIGIT	%1,	%2,	%3
	POP		AF
ENDM

SETBYTE		MACRO
	LD		A,	%2
	LD		(%1),	A
ENDM

SETBYTEND	MACRO				; Non destructive version of SETBYTE
	PUSH	AF
	SETBYTE	%1,	%2
	POP		AF
ENDM

PIXTOMEM	MACRO				; Load X/Y position from pointer arg1 and calculate memory address into HL
	LD		HL, (%1)			; Load obj pixel position into HL
	CALL	CALVAD
ENDM

POSTOPIX	MACRO				; Convert X/Y fixed-point position into pixel position and store in HL
	IF '%1'=='D'				; Convert & save X
		LD	A,	D
	ELSE
		LD	A,	(%1)
		SRL	A
		SRL	A
	ENDIF
	LD		L,	A

	IF '%2'=='E'				; Convert & save Y
		LD	A,	E
	ELSE
		LD	A,	(%2)
		SRL	A
		SRL	A
	ENDIF
	LD		H,	A
ENDM

POSTOMEM	MACRO
	POSTOPIX	%1,	%2
	CALL	CALVAD
ENDM

PRINTRA		MACRO				; Print the contents of A onto the screen as Hex value (non destructive to AF)
	PUSH	AF
	CALL	PRTBYT
	POP		AF
ENDM

STOOBJLAST	MACRO
	IF '%1' == 'X'
		LD		A,	(IX+0)
		LD		(IX+6),	A			; Store current xPos into lastX
	ENDIF
	IF '%1' == 'Y'
		LD		A,	(IX+1)
		LD		(IX+7),	A			; Store current yPos into lastY
	ENDIF
ENDM

;
;	C = PLAYERY < FLOORHEIGHT
;
TESTONFLOOR	MACRO				; C is set if not on floor (NC on floor)
	LD		A,	(PLAYERY)
	CP		(FLOORHEIGHT<<2)
ENDM

TESTONFLOORND	MACRO			; Non-Destructive version of TESTONFLOOR
	PUSH	AF
	TESTONFLOOR
	POP		AF
ENDM

CP16		MACRO				; Compare two 16-bit numbers without changing their values
	PUSH	HL
	PUSH	BC
	OR		A					; Clear carry flag
	SBC		HL,	BC
	POP		BC
	POP		HL
ENDM

PLAYMUSIC	MACRO
	LD		DE,	%1
	CALL	MELDY
ENDM

PLAYTONE	MACRO
	PUSH	HL
	PUSH	AF
	LD		HL,	2_000_000/%1
	LD		($11A1),	HL
	CALL	MSTA
	POP		AF
	POP		HL
ENDM





;
;	CODE
;





	ORG		$1200

TITLESCREEN:
	CALL	RESETGAME
	CLS
	CURHOME
	PRINTLN	TITLE
	LD		A,	5
	CALL	XTEMP
	PLAYMUSIC	MUSTITLE
	PRINTCEN	28,	24,	MSGCONTINUE
	CALL	WAITKEYPRESS
INSTRUCTIONSCREEN:
	CLS							; force clear screen
	PRINTCEN	20,	0,	INSTRUC1
	PRINTCEN	10,	2,	INSTRUC2
	PRINTXY	16,	4,	INSTRUC3
	PRINTXY	16,	5,	INSTRUC4
	PRINTXY	12,	6,	INSTRUC5
	PRINTXY	6,	7,	INSTRUC6
	PRINTCEN	14,	9,	INSTRUC7
	PRINTCEN	36,	11,	INSTRUC8
	PRINTCEN	34,	12,	INSTRUC9
	PRINTCEN	19,	13,	INSTRUC10
	PRINTCEN	36,	15,	INSTRUC11
	PRINTCEN	31,	16,	INSTRUC12

	PRINTCEN	28,	24,	MSGCONTINUE
	CALL	WAITKEYPRESS
	CLS
	CALL	UPDATESCRDSP
	CALL	DRAWLIVES
DRAWFLOOR:
	LD		B,	40
	LD		HL,	FLOORHEIGHT+1:00
	CALL	CALVAD
DRAWFLOOR1:
	LD		(HL),	FLOORSYM
	INC		HL
	DJNZ	DRAWFLOOR1			; Draw floor into VRAM
DRAWTEXT:
	PRINTXY	0,	FLOORHEIGHT+2,	MSGSCORE
	PRINTXY	0,	FLOORHEIGHT+3,	MSGHISCORE

	CALL	DRAWPLAYER
	CALL	DRAWOBJS
	SLEEPX	$FF,	$FF
MAIN:
	CALL	MSTP				; Stop tone from playing

	CALL	BRKEY				; Stop game if Shift+Break is pressed
	JP		Z,	GAMEOVER

	;CALL	DRAWDEBUG			; Draw debug codes

	CALL	SNCV				; Wait for V-Blank before drawing

	CALL	DRAWPLAYER
	CALL	DRAWOBJS

	CALL	CHKCOLLISION

	SLEEPX	$AA, $12
	
	CALL	CONTROLS
	CALL	CHECKKEYDOWN
CM:
	CALL	PROCESSOBJS
	CALL	MOVE
	LD		A,	(LIVES)
	CP		0
	JP		NZ,	MAIN			; Repeat game loop until no more lives left


GAMEOVER:
	CALL	MSTP
	CALL	DRAWPLAYER
	CALL	DRAWLIVES
	LD		A,	10
	CALL	CLEARLINE
	LD		A,	11
	CALL	CLEARLINE

	PRINTXY	15,	10,	MSGGAMOVR
	PRINTXY	14,	11,	MSGSCORE
	PRINTXY	20,	11,	MSGSCRDEC

	LD		A,	7
	CALL	XTEMP

	LD		HL,	(SCORE)			; Test score against high score
	LD		DE,	(HISCORE)
	CCF
	SBC		HL,	DE
	JP		P,	GONHS
	PLAYMUSIC	MUSGAMOVR
	JP		EXIT
GONHS:							; "Game Over New High Score"
	LD		A,	12
	CALL	CLEARLINE
	PRINTCEN	11,	12,	MSGNHS
	PLAYMUSIC	MUSNHS
	LD		HL,	(SCORE)
	LD		(HISCORE),	HL
EXIT:
	SLEEPX	$FF,	$FF
	SLEEPX	$FF,	$FF
	LD		A,	24
	CALL	CLEARLINE
	PRINTCEN	28,	24,	MSGCONTINUE
	CALL	WAITKEYPRESS
	JP		TITLESCREEN






;
;	FUNCTIONS
;






WAITKEYPRESS:
WAIT1:							; Wait while key is down
	CALL	GETKY
	JP		NZ,	WAIT1
WAIT2:							; Wait until key is pressed
	CALL	GETKY
	JP		Z,	WAIT2
	RET

;DRAWDEBUG:
;	PUSH	HL
;	CURHOME
;	LD		HL,	(PLAYERX)
;	CALL	PRTWRD
;	CALL	PRNTSPACE
;	LD		HL,	(PLAYVELX)
;	CALL	PRTWRD
;	DRAWDIGIT	FLAGFLOOR,	0,	(FLOORHEIGHT+3)
;	DRAWDIGIT	KEYDOWN,	2,	(FLOORHEIGHT+3)
;	DRAWDIGIT	FLAGACCX,	4,	(FLOORHEIGHT+3)
;	;DRAWDIGIT	SCORE,		6,	(FLOORHEIGHT+3)
;	POP		HL
;	RET

CLEARLINE:						; Clear the line with number stored in A
	LD		B,	40
	LD		H,	A
	LD		L,	0
	CALL	CALVAD
CLEARLINE1:
	LD		(HL),	0
	INC		HL
	DJNZ	CLEARLINE1
	RET

RESETGAME:
	LD		DE,	OBJECTDEFS
	LD		HL,	OBJECTDEFSDEFAULTS
	LD		BC,	OBJCOUNT*OBJVALS
	LDIR
	LD		DE,	RESETTABLEVALUES
	LD		HL,	RESETTABLEVALUESDEFAULTS
	LD		BC,	RESETTABLEVALUESDEFAULTS-RESETTABLEVALUES
	LDIR
	RET

CHKCOLLISION:
	POSTOMEM	PLAYERX,	PLAYERY
	LD		A,	(HL)
	CP		0
	RET		Z					; Do nothing if character is blank
	CP		PLAYERSYM
	JP		NZ,	COLLISION		; Collided if anything other than player symbol
CHKCOLABOVE:
	LD		A,	(PLAYERY)
	LD		E,	A
	SRL		E
	SRL		E
	DEC		E
	POSTOMEM	PLAYERX,	E
	LD		A,	(HL)
	CP		PLAYERSYM
	JP		NZ,	COLLISION
CHKCOLBELOW:
	INC		E
	INC		E
	CP		PLAYERSYM
	RET		Z					; Do nothing if player symbol
COLLISION:
	CALL	HITOBJ				; Destroy collided object
	RET

DRAWPLAYER:
	LD		HL,	(PLAYLASTXY)	; Clear last player location
	LD		(HL),	$00

	POSTOMEM PLAYERX, PLAYERY	; Save last position
	LD		(PLAYLASTXY),	HL

	LD		(HL),	PLAYERSYM	; Draw player
	RET

DRAWOBJS:
	LD		B,	OBJCOUNT
DRAWOBJ:
	CALL	OBJHEADIDX			; Object header stored in IX

	;POSTOMEM	IX+6,	IX+7
	;LD		(HL),	$00			; Clear location

	CALL	CLEAR2DOBJ
	CALL	DRAW2DOBJ
	;POSTOMEM	IX,	IX+1
	;LD		A,	(IX+5)
	;LD		(HL),	A			; Draw object
	STOOBJLAST	X
	STOOBJLAST	Y

	DJNZ	DRAWOBJ
	RET

CLEAR2DOBJ:
	PUSH	BC
	LD		B,	(IX+3)			; Load width
	LD		D,	(IX+6)			; Load lastX
	SRL		D
	SRL		D
CLR2DWID:
	POSTOMEM	D,	IX+7
	LD		A,	D
	INC		D

	CP		40
	JP		NC,	CLEAR2DOBJEND
	CP		0
	JP		M,	C2DTSTLOOP

	LD		(HL),	$00			; Clear location
C2DTSTLOOP:
	DJNZ	CLR2DWID
CLEAR2DOBJEND:
	POP		BC
	RET

DRAW2DOBJ:
	PUSH	BC					; Save current state of BC
	LD		B,	(IX+3)			; Load width (int)
	LD		D,	(IX+0)			; Load xPos (fixed-point)
	SRL		D
	SRL		D
DRAW2DWID:
	POSTOMEM	D,	IX+1
	LD		A,	D
	INC		D

	CP		40
	JP		P,	DRAW2DOBJEND
	CP		0
	JP		M,	D2DTSTLOOP

	SETBYTE	$E8A3,	0
	LD		A,	(IX+5)			; Load symbol
	LD		(HL),	A			; Draw object
	SETBYTE	$E8A3,	1
D2DTSTLOOP:
	DJNZ	DRAW2DWID
DRAW2DOBJEND:
	POP		BC					; Load saves state of BC
	RET

HITOBJ:							; Compare character stored in A with object symbols and destroy corresponding obj
	LD		C,	A
	LD		B,	OBJCOUNT
	LD		IX,	OBJECTDEFS
	LD		DE,	OBJVALS
FINDHITOBJ:
	LD		A,	(IX+5)
	CP		C
	JP		Z,	FOUNDHITOBJ
	ADD		IX,	DE
	DJNZ	FINDHITOBJ
	RET
FOUNDHITOBJ:
	CP		BLOCKSYM
	CALL	NZ,	OBJRESET
	JP		NZ,	FOUNDHITOBJ1
	SETBYTE	PLAYVELY,	0		; Stop player movement if hit block
	SETBYTE	PLAYERY,	FLOORHEIGHT<<2
FOUNDHITOBJ1:
	LD		HL,	(SCORE)			; Increase score
	LD		D,	0
	LD		E,	(IX+4)

	LD		A,	(IX+5)
	CP		BLOCKSYM
	JR		NZ,	ADDPOINTS
SUBPOINTS:
	PLAYTONE	128

	CALL	DECLIFE

	CCF
	SBC		HL,	DE
	JR		C,	NEGSCORE
	JR		UPDATESCORE
ADDPOINTS:
	PLAYTONE	512
	ADD		HL,	DE
	JR		UPDATESCORE
	; TODO: Add check for negative
NEGSCORE:
	LD		HL,	0
UPDATESCORE:
	LD		(SCORE),	HL
	CALL	UPDATESCRDSP

	RET

; Binary to ASCII decimal conversion
; taken from BASIC 5025 interpreter
; Converts HL to 5 decimal digits and stores in (DE)
; DE MUST be pushed onto the stack before calling this function
BINDEC:
	LD		C,	0				; Counter
	;LD		DE,	MSGSCRDEC		; Load address of score string
	PUSH	DE					; Save pointer
	LD		B,	0
	LD		DE,	10_000			; Divide by powers
	CALL	IDIVIDE
	LD		DE,	1_000
	CALL	IDIVIDE
	LD		DE,	100
	CALL	IDIVIDE
	LD		DE,	10
	CALL	IDIVIDE
	LD		A,	L				; Remainder
	POP		DE					; Result pointer
	OR		'0'					; Turn to ascii
	LD		(DE),	A			; Store
	INC		DE
	LD		A,	$0D
	LD		(DE),	A
	RET

; Specialized division routine used by BINDEC.
; Divides HL by DE and stores the the one digit ASCII result.
; taken from BASIC 5025 interpreter
IDIVIDE:
	LD		A,	$FF				; Division count
ID2:
	INC		A
	OR		A					; Clear carry
	SBC		HL,	DE				; Subtract
	JR		NC,	ID2				; until underflow
	ADD		HL,	DE				; Backup if negative
	OR		A
	JR		NZ,	ID3
	OR		B
	;RET		Z				; Prevent padded zeros
	XOR		A
ID3:
	INC		B
	OR		'0'					; Convert to ASCII
	POP		DE					; Return address
	EX		(SP),	HL			; Pointer's on stack
	LD		(HL),	A			; Store digit
	INC		HL					; Bump pointer
	EX		(SP),	HL			; Put it back
	PUSH	DE					; Return
	INC		C
	RET
;
;	keydown = 0;
;	if (key == LEFTKEY || key == RIGHTKEY) {
;		keydown = 1;
;	}
;
CHECKKEYDOWN:
	SETBYTE	KEYDOWN,	0		; Reset keydown
	CALL	GETKY				; 00 if not pressed
	CP		LEFTKEY
	JP		Z,	KEYDETECTOK
	CP		RIGHTKEY
	JP		Z,	KEYDETECTOK
	RET
KEYDETECTOK:
	SETBYTE	KEYDOWN,	1		; Set if left/right key detected
	RET

;
;	if (keydown == RIGHTKEY) {
;		BOOLRIGHT = 1;
;		PLAYVELX += 1;
;		PLAYVELX = PLAYVELX > MAXSPEED ? MAXSPEED;
;		return;
;	} else if (keydown == LEFTKEY) {
;		BOOLRIGHT = 0;
;		PLAYVELX -= 1;
;		PLAYVELX = PLAYVELX < -MAXSPEED ? -MAXSPEED;
;		return;
;	} else if (keydown == SPACEKEY) {
;		if (!onFloor()) return;
;		PLAYVELY = (-1<<3) -4;
;		PLAYERY -= 1;
;		return;
;	}
;
CONTROLS:
	CALL	GETKY
	RET		Z					; Do nothing if no key pressed
	CP		RIGHTKEY
	JP		Z,	MOVERIGHT		; if right pressed
	CP		LEFTKEY
	JP		Z,	MOVELEFT		; if left pressed
	CP		SPACEKEY			
	JP		Z,	JUMP			; if space pressed
	RET							; Return if neither left nor right were pressed
MOVERIGHT:
	SETBYTE	BOOLRIGHT,	1
	LD		A,	(PLAYVELX)
	INC		A
	CALL	CLAMPVELX
	LD		(PLAYVELX),	A
	RET
MOVELEFT:
	SETBYTE	BOOLRIGHT,	0
	LD		A,	(PLAYVELX)
	DEC		A
	CALL	CLAMPVELX
	LD		(PLAYVELX),	A
	RET
JUMP:
	TESTONFLOOR					; Check if on floor
	RET		C					; Return if player is not on the floor
	SETBYTE	PLAYVELY,	JUMPSPEED
	LD		A,	(PLAYERY)
	DEC		A
	LD		(PLAYERY),	A
	RET

CLAMPVELX:						; This assumes xVel is loaded into reg A
	CP		0
	JP		M,	CVXNEG
CVXPOS:
	CP		MAXSPEED
	JP		P,	CVXPOSMAX
	RET
CVXNEG:
	CP		-MAXSPEED
	JP		M,	CVXNEGMAX
	RET
CVXPOSMAX:
	LD		A,	MAXSPEED
	RET
CVXNEGMAX:
	LD		A,	-MAXSPEED
	RET

MOVE:							; Update playerx and playery values
	SETBYTEND	FLAGFLOOR,	0	; Reset onFloor flag
	TESTONFLOOR					; Check if on floor
	LD		A,	0				; If on floor, set yVel to 0 (p1)
	JP		NC,	MOVE1			; If on floor, skip yVel calculations
	SETBYTEND	FLAGFLOOR,	1	; Set onFloor flag
	LD		A,	(PLAYERY)		; Add yVel to yPos
	LD		HL,	PLAYVELY
	ADD		A,	(HL)
	LD		(PLAYERY),	A

	TESTONFLOOR					; Check if on or below floor and fix yPos and yVel
	JP		C,	MOVE2			; If not on floor, add gravity
	LD		A,	FLOORHEIGHT<<2	; If on or below floor, set yPos to floor
	LD		(PLAYERY),	A
	LD		A,	0				; If on floor, set yVel to 0 (p1)
	JP		MOVE1				; Skip gravity if on floor
MOVE2:
	; Update Y velocity
	LD		A,	(PLAYVELY)
	ADD		A,	GRAVITY
MOVE1:
	LD		(PLAYVELY),	A		; set yVel to either 0 or yVel-gravity (p2)
	LD		A,	(KEYDOWN)		; Test if a key is currently being held
	OR		A
	JP		NZ,	MOVEX			; If a key is pressed, move

	;SETBYTE	FLAGACCX,	9

	LD		A,	(FLAGFLOOR)		; If not on floor, skip friction calculation
	OR		A
	JP		NZ,	MOVEX

	LD		A,	(PLAYVELX)
	CALL	STEPTOZERO			; Gradually reduce Xvel to 0 if no key pressed
	LD		(PLAYVELX),	A
MOVEX:
	LD		A,	(PLAYVELX)		; Add Xvel to Xpos
	LD		HL,	PLAYERX
	ADD		A,	(HL)
	LD		(PLAYERX),	A
MOVEXWALL:						; Wrap player around screen
	SRL		A					; Remove a digit of precision to circumvent signed-byte limitations
	CP		-10					; ngl, I have no clue why this works
	JP		M,	MOVEXWALLLEFT	; Player has gone left off screen
	CP		(39<<1)+1
	RET		M					; Player has not gone right off screen
MOVEXWALLRIGHT:
	SETBYTE	PLAYERX,	0		; Wrap player around to left side
	RET
MOVEXWALLLEFT:
	SETBYTE	PLAYERX,	39<<2	; Wrap player around to right side
	RET

IMULT:							; Multiply D by E and store the result in HL (destructive to BC,DE,AF)
	LD		HL,	0
	LD		A,	D
	OR		A
	RET		Z
	LD		B,	D
	LD		D,	H
IML:
	ADD		HL,	DE
	DJNZ	IML
	RET

IDIV:							; Divide D by E and store the result in D with remainder in E
	LD		A,	D
	LD		D,	0
IDV:
	CP		E
	JP		C,	IDVDONE
	SUB		E
	INC		D
	JP		IDV
IDVDONE:
	LD		E,	A				; Store remainder
	RET

SLEEP:							; Sleep for a given number of iterations
	LD		A,	(SLEEPCOUNT)
SLEEP1:
	SUB		1
	OR		A
	JP		NZ,	SLEEP1
	DJNZ	SLEEP
	RET

STEPTOZERO:						; INC/DEC A towards zero depending on polarity
	;SETBYTEND	FLAGACCX,	0
	CP		0
	RET		Z					; Already zero
	JP		M,	STZNEG			; Negative
STZPOS:
	;SETBYTEND	FLAGACCX,	1
	DEC		A
	RET
STZNEG:
	;SETBYTEND	FLAGACCX,	2
	INC		A
	RET

RAND8:							; Generate a pseudo-random number (not great, but good enough)
	LD		A,	(RSEED)
	AND		$B8
	SCF
	JP		PO,	RANDNOCLR
	CCF
RANDNOCLR:
	LD		HL,	RSEED
	LD		A,	R
	ADD		A,	(HL)
	RLA
	LD		(RSEED),	A
	RET

PROCESSOBJS:					; Updates all enemy objects
	LD		B,	OBJCOUNT		; Number of objects to cycle through
UPDATEOBJ:
	; TODO: add component count instead of multiplying since the objs are referenced in order anyway
	CALL	OBJHEADIDX			; Calculate memory address

	LD		A,	(IX+0)			; Load xPos
	ADD		A,	(IX+2)			; Add xVel to xPos
	LD		(IX+0),	A
	SRL		A
	CP		-8
	CALL	M,	OBJLEFT

	DJNZ	UPDATEOBJ			; Loop if there are still objects to process
	RET

OBJHEADIDX:						; Save address of object header in IX based on object index stored in B
	LD		E,	B
	DEC		E
	LD		D,	OBJVALS			; Number of elements in each object
	PUSH	BC
	CALL	IMULT
	POP		BC
	EX		DE,	HL
	LD		IX,	OBJECTDEFS
	ADD		IX,	DE				; Calculate the memory address for the next object and store in IX
	RET

OBJLEFT:
	CALL	OBJRESET
	; TODO: Steps to take when obj leaves the screen
	RET

OBJRESET:						; Resets object at header IX
	CALL	RAND8
	AND		0011_1100B
	ADD		A,	3<<2
	LD		(IX+1),	A

	LD		(IX+0),	39<<2
	RET

UPDATESCRDSP:
	LD		DE,	MSGSCRDEC		; Update score display
	LD		HL,	(SCORE)
	PUSH	DE
	CALL	BINDEC
	POP		DE

	LD		DE,	MSGHSCRDEC		; Update high score display
	LD		HL,	(HISCORE)
	PUSH	DE
	CALL	BINDEC
	POP		DE

	PRINTXY	8,	FLOORHEIGHT+2,	MSGSCRDEC
	PRINTXY	8,	FLOORHEIGHT+3,	MSGHSCRDEC

	RET

DECLIFE:
	PUSH	HL
	PUSH	DE
	LD		A,	(LIVES)
	DEC		A
	CALL	UPDATESLIVES
	POP		DE
	POP		HL
	RET

UPDATESLIVES:					; LIVES should already be loaded into A
	CP		5
	JP		M,	SKIPSETLIVES5
	LD		A,	5
SKIPSETLIVES5:
	LD		(LIVES),	A
	CALL	DRAWLIVES
	RET

DRAWLIVES:
	PRINTXY	29,	FLOORHEIGHT+2,	MSGLIVES
	LD		A,	(LIVES)
	LD		B,	5				; 5 lives maximum
	LD		HL,	VIDMEM+34+(FLOORHEIGHT+2)*40
DRAWLIFE:
	INC		HL
	DEC		A
	JP		M,	DRAWLIFEBLANK
	LD		(HL), PLAYERSYM
	DJNZ	DRAWLIFE
	RET
DRAWLIFEBLANK:
	LD		(HL), 0
	DJNZ	DRAWLIFE
	RET





;
;	STORED DATA
;






CHRMAP		"MZ-ASCII-EU"

MSGGAMOVR:	DB	"GAME OVER", $0D
MSGEXIT:	DB	"EXITED PROGRAM", $0D
MSGNHS:		DB	"NEW "
MSGHISCORE:	DB	"HI"
MSGSCORE:	DB	"SCORE", $0D
MSGSCRDEC:	DB	"00000", $0D
MSGHSCRDEC:	DB	"00000", $0D
MSGLIVES:	DB	"LIVES", $0D
HISCORE:	DB	$00,$00			; 16-bits for high score
SLEEPCOUNT:	DS	2				; Reserve 2 bytes of memory (zeroed)
FLAGFLOOR:	DB	$00				; An indicator flag for debugging
FLAGACCX:	DB	$00
BOOLRIGHT:	DB	$01
KEYDOWN:	DB	$00				; If a key is being held down
RSEED:		DB	$A1

; Resettable values
RESETTABLEVALUES:
PLAYERX:	DS	1
PLAYERY:	DS	1
PLAYVELX:	DS	1
PLAYVELY:	DS	1
PLAYLASTXY:	DS	2
SCORE:		DS	2	; 16-bits for score
LIVES:		DS	1	; The number of lives the player has

; Defaults for resettable values
RESETTABLEVALUESDEFAULTS:
DEFAULTPLAYERX:		DB	$14<<2
DEFAULTPLAYERY:		DB	FLOORHEIGHT<<2
DEFAULTPLAYVELX:	DB	$00
DEFAULTPLAYVELY:	DB	$00
DEFAULTPLAYLASTXY:	DS	2,	0	
DEFAULTSCORE:		DS	2,	0	; 16-bits for score
DEFAULTLIVES:		DB	5		; The number of lives the player has

; Music
MUSTITLE:	;DB	$0D	; uncomment to skip music
DB	"GEDEGA", $0D	; music to play on the title screen
MUSGAMOVR:	DB	"FE#DD", $0D
MUSNHS:		DB	"D#DEF", $0D

; Title Screen
TITLE: 		;DB	"HopSkip (Debug)", $0D ; uncomment to skip title
CHRMAP		"USER-DEFINED"
MAPCHR	'#', $C8
; $F1(circle) $F7 $40 $70(grey block) $81(grid) $8B(nose) $90(eye) $CC(inverted circle) $FA(diamond)
MAPCHR	'.', '.'

DB	"      ............................      "
DB	"     .##.....##..#######..########.     "
DB	"     .##.....##.##.....##.##.....##     "
DB	"     .##.....##.##.....##.##.....##     "
DB	"     .#########.##.....##.########.     "
DB	"     .##.....##.##.....##.##.......     "
DB	"     .##.....##.##.....##.##.......     "
DB	"     .##.....##..#######..##.......     "
DB	"     ..............................     "
DB	"    .######..##....##.####.########.    "
DB	"    ##....##.##...##...##..##.....##    "
DB	"    ##.......##..##....##..##.....##    "
DB	"    .######..#####.....##..########.    "
DB	"    ......##.##..##....##..##.......    "
DB	"    ##....##.##...##...##..##.......    "
DB	"    .######..##....##.####.##.......    "
DB	"     ..............................     ", $0D

CHRMAP		"MZ-ASCII-EU"

MSGCONTINUE:
DB	"PRESS ANY KEY TO CONTINUE...", $0D

; Instruction page
INSTRUC1:	DB	"HOPSKIP INSTRUCTIONS", $0D
INSTRUC2:	DB	"-= Keys =-", $0D
INSTRUC3:	DB	          "A - Left", $0D
INSTRUC4:	DB	          "D - Right", $0D
INSTRUC5:	DB	      "Space - Jump", $0D
INSTRUC6:	DB	"Shift+Break - End Game", $0D
INSTRUC7:	DB	"-= Gameplay =-", $0D
INSTRUC8:	DB	"Hit the flying objects and avoid the", $0D
INSTRUC9:	DB	"blocks! Hitting a block will cause", $0D
INSTRUC10:	DB	"you to lose points!", $0D
INSTRUC11:	DB	"Each object has its own point value.", $0D
INSTRUC12:	DB	"Get as many points as possible!", $0D

; $60 = alien


;
; Objects to dodge
;
; 0: xPos | 1: yPos | 2: xVel | 3: width | 4: points | 5: sym | 6: lastX | 7: lastY
OBJECTDEFS:	DS	OBJCOUNT*OBJVALS

OBJECTDEFSDEFAULTS:
DEFAULTOBJ1H:		DB	45<<2,	6<<2,	-0000_0100B,	3,	5,	SPACESHIP,	0,	0
DEFAULTOBJ2H:		DB	50<<2,	10<<2,	-0000_0011B,	3,	3,	FACE1SYM,	0,	0
DEFAULTOBJ3H:		DB	40<<2,	13<<2,	-0000_0010B,	4,	2,	SNAKESYM,	0,	0
DEFAULTOBJ4H:		DB	60<<2,	17<<2,	-0000_0010B,	1,	15,	CARSYM,		0,	0
DEFAULTOBJBLOCK1:	DB	62<<2,	18<<2,	-0000_0010B,	6,	10,	BLOCKSYM,	0,	0
DEFAULTOBJBLOCK2:	DB	55<<2,	15<<2,	-0000_0001B,	5,	10,	BLOCKSYM,	0,	0

END